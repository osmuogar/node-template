CREATE DATABASE IF NOT EXISTS LEARNING_MANAGEMENT_SYSTEM;

# Switch database
USE LEARNING_MANAGEMENT_SYSTEM;

# Create USERS table
CREATE TABLE IF NOT EXISTS USERS (
  id VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  PRIMARY KEY (id)
);

# Create trigger for USERS table
CREATE TRIGGER ID_AS_UUID_USER BEFORE
INSERT
  ON USERS FOR EACH ROW
SET
  NEW.id = UUID();

# Create COURSES table
CREATE TABLE IF NOT EXISTS COURSES (
  id VARCHAR(255) NOT NULL,
  title VARCHAR(255) UNIQUE NOT NULL,
  PRIMARY KEY (id)
);

# Create trigger for COURSES table
CREATE TRIGGER ID_AS_UUID_COURSES BEFORE
INSERT
  ON COURSES FOR EACH ROW
SET
  NEW.id = UUID();

# Create MODULES table
CREATE TABLE IF NOT EXISTS MODULES (
  id VARCHAR(255) NOT NULL,
  title VARCHAR(255) NOT NULL,
  isRootModule BOOLEAN NOT NULL,
  moduleId VARCHAR(255),
  courseId VARCHAR(255) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (title, courseId),
  FOREIGN KEY (courseId) REFERENCES COURSES(id)
);

# Create trigger for MODULES table
CREATE TRIGGER ID_AS_UUID_MODULES BEFORE
INSERT
  ON MODULES FOR EACH ROW
SET
  NEW.id = UUID();

# Create LESSONS table
CREATE TABLE IF NOT EXISTS LESSONS (
  id VARCHAR(255) NOT NULL,
  moduleId VARCHAR(255) NOT NULL,
  title VARCHAR(255) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (title, moduleId),
  FOREIGN KEY (moduleId) REFERENCES MODULES(id)
);

# Create trigger for LESSONS table
CREATE TRIGGER ID_AS_UUID_LESSONS BEFORE
INSERT
  ON LESSONS FOR EACH ROW
SET
  NEW.id = UUID();

# Create COMPLETIONS table
CREATE TABLE IF NOT EXISTS COMPLETIONS (
  id VARCHAR(255) NOT NULL,
  userId VARCHAR(255) NOT NULL,
  lessonId VARCHAR(255) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (userId, lessonId),
  FOREIGN KEY (userId) REFERENCES USERS(id),
  FOREIGN KEY (lessonId) REFERENCES LESSONS(id)
);

# Create trigger for COMPLETIONS table
CREATE TRIGGER ID_AS_UUID_COMPLETIONS BEFORE
INSERT
  ON COMPLETIONS FOR EACH ROW
SET
  NEW.id = UUID();