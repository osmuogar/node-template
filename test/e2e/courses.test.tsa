/* PROJECT LICENSE */

import apiService, { listen } from '../../src/server';
import request from 'supertest';
import mysql from 'mysql2/promise';
import { cleanDatabase } from './util/cleandatabase.utils';
import User from '../../src/modules/users/models/User';
import { testUtilCreateUser } from './util/createuser.util';
import Lesson from '../../src/modules/lessons/models/Lesson';
import Module from '../../src/modules/modules/models/Module';
import { testUtilCreateModule } from './util/createmodule.util';
import { testUtilCreateLesson } from './util/createlesson.util';
import Course from '../../src/modules/courses/models/Course';
import { testUtilCreateCourse } from './util/createcouse.util';
import Completion from '../../src/modules/completions/models/Completion';
import { testUtilCreateCompletion } from './util/createcompletion.util';
import { Server } from 'http';

let storageConnection: mysql.Connection;
let server: Server;
beforeAll(async () => {
  server = await listen();
  storageConnection = await mysql.createConnection({
    host: 'localhost',
    user: 'test',
    password: 'test',
    database: 'LEARNING_MANAGEMENT_SYSTEM',
  });
});
afterAll(async () => {
  await storageConnection.end();
  return new Promise<void>((resolve, reject) => {
    server.close((err) => {
      if (err) {
        return reject(err);
      }
      return resolve();
    });
  })
});

describe('IT | Courses', () => {
  let user: User;
  beforeEach(async () => {
    user = await testUtilCreateUser(storageConnection);
  });
  describe('POST /v1/users/:userId/courses/', () => {
    afterEach(async () => {
      await cleanDatabase(storageConnection);
    });
    it('should create a course', async () => {
      const PATH = '/v1/users/' + user.id + '/courses';
      const TITLE = 'My first course';
      const response = await request(apiService).post(PATH).send({
        title: TITLE,
      });
      expect(response.status).toBe(201);
      expect(typeof response.body.id).toBe('string');
      expect(response.body).toEqual({
        id: response.body.id,
        title: TITLE,
        completion: {
          completed_lessons: 0,
          percentage: 0,
          total_lessons: 0
        }
      });
    });
  });
  describe('GET /v1/users/:userId/courses/:courseId', () => {
    let firstModule: Module;
    let firstLesson: Lesson;
    let secondLesson: Lesson;
    let innerModule: Module;
    let secondModule: Module;
    let course: Course;
    let completion: Completion;
    beforeEach(async () => {
      course = await testUtilCreateCourse(storageConnection, "First course");
      firstModule = await testUtilCreateModule(storageConnection, "1.1 My first module", course.id!);
      innerModule = await testUtilCreateModule(storageConnection, "1.1.1 My inner module", course.id!, firstModule.id!);
      firstLesson = await testUtilCreateLesson(storageConnection, "1.1 My lesson", firstModule.id!);
      secondLesson = await testUtilCreateLesson(storageConnection, "1.2 My second lesson", firstModule.id!);
      secondModule = await testUtilCreateModule(storageConnection, "1.2 My second module", course.id!);
      completion = await testUtilCreateCompletion(storageConnection, user.id!, firstLesson.id!);
    });
    afterEach(async () => {
      await cleanDatabase(storageConnection);
    });
    it('should retrieve a course', async () => {
      const PATH = '/v1/users/' + user.id + '/courses/' + course.id;
      const response = await request(apiService).get(PATH);
      expect(response.body).toEqual({
        title: course.title,
        completion: {
          completed_lessons: 1,
          percentage: 50,
          total_lessons: 2
        },
        modules:
          [{
            id: firstModule.id,
            course_id: firstModule.courseId,
            title: firstModule.title,
            is_root_module: firstModule.isRootModule,
            module_id: firstModule.moduleId,
            lessons: [{
              id: firstLesson.id,
              title: firstLesson.title,
              module_id: firstLesson.moduleId,
              is_completed: true,
            }, {
              id: secondLesson.id,
              title: secondLesson.title,
              module_id: secondLesson.moduleId,
              is_completed: false,
            }],
            modules: [{
              id: innerModule.id,
              course_id: course.id,
              title: innerModule.title,
              is_root_module: innerModule.isRootModule,
              module_id: innerModule.moduleId,
              lessons: [],
              modules: [],
            }]
          }, {
            id: secondModule.id,
            course_id: secondModule.courseId,
            title: secondModule.title,
            is_root_module: secondModule.isRootModule,
            module_id: secondModule.moduleId,
            lessons: [],
            modules: []
          }]
      });
      expect(response.status).toBe(200);
    });
  });
  describe('GET /v1/users/:userId/courses/', () => {
    let firstCourse: Course;
    let firstFirstModule: Module;
    let firstFirstLesson: Lesson;
    let firstSecondLesson: Lesson;
    let firstInnerModule: Module;
    let firstSecondModule: Module;
    let firstCompletion: Completion;

    let secondCourse: Course;
    let secondFirstModule: Module;
    let secondFirstLesson: Lesson;
    let secondSecondLesson: Lesson;
    let secondInnerModule: Module;
    let secondSecondModule: Module;
    let secondCompletion: Completion;
    beforeEach(async () => {
      firstCourse = await testUtilCreateCourse(storageConnection, "First course");
      firstFirstModule = await testUtilCreateModule(storageConnection, "1.1 My first module", firstCourse.id!);
      firstInnerModule = await testUtilCreateModule(storageConnection, "1.1.1 My inner module", firstCourse.id!, firstFirstModule.id!);
      firstFirstLesson = await testUtilCreateLesson(storageConnection, "1.1 My lesson", firstFirstModule.id!);
      firstSecondLesson = await testUtilCreateLesson(storageConnection, "1.2 My second lesson", firstFirstModule.id!);
      firstSecondModule = await testUtilCreateModule(storageConnection, "1.2 My second module", firstCourse.id!);
      firstCompletion = await testUtilCreateCompletion(storageConnection, user.id!, firstFirstLesson.id!);

      secondCourse = await testUtilCreateCourse(storageConnection, "Second course");
      secondFirstModule = await testUtilCreateModule(storageConnection, "1.1 My first module", secondCourse.id!);
      secondInnerModule = await testUtilCreateModule(storageConnection, "1.1.1 My inner module", secondCourse.id!, secondFirstModule.id!);
      secondFirstLesson = await testUtilCreateLesson(storageConnection, "1.1 My lesson", secondFirstModule.id!);
      secondSecondLesson = await testUtilCreateLesson(storageConnection, "1.2 My second lesson", secondFirstModule.id!);
      secondSecondModule = await testUtilCreateModule(storageConnection, "1.2 My second module", secondCourse.id!);
      secondCompletion = await testUtilCreateCompletion(storageConnection, user.id!, secondFirstLesson.id!);
    });
    afterEach(async () => {
      await cleanDatabase(storageConnection);
    });
    it('should retrieve a list of courses', async () => {
      const PATH = '/v1/users/' + user.id + '/courses/?limit=10&offset=0';
      const response = await request(apiService).get(PATH);
      expect(response.body).toEqual([{
        title: firstCourse.title,
        completion: {
          completed_lessons: 1,
          percentage: 50,
          total_lessons: 2
        },
        modules:
          [{
            id: firstFirstModule.id,
            course_id: firstFirstModule.courseId,
            title: firstFirstModule.title,
            is_root_module: firstFirstModule.isRootModule,
            module_id: firstFirstModule.moduleId,
            lessons: [{
              id: firstFirstLesson.id,
              title: firstFirstLesson.title,
              module_id: firstFirstLesson.moduleId,
              is_completed: true,
            }, {
              id: firstSecondLesson.id,
              title: firstSecondLesson.title,
              module_id: firstSecondLesson.moduleId,
              is_completed: false,
            }],
            modules: [{
              id: firstInnerModule.id,
              course_id: firstCourse.id,
              title: firstInnerModule.title,
              is_root_module: firstInnerModule.isRootModule,
              module_id: firstInnerModule.moduleId,
              lessons: [],
              modules: [],
            }]
          }, {
            id: firstSecondModule.id,
            course_id: firstSecondModule.courseId,
            title: firstSecondModule.title,
            is_root_module: firstSecondModule.isRootModule,
            module_id: firstSecondModule.moduleId,
            lessons: [],
            modules: []
          }]
      }, {
        title: secondCourse.title,
        completion: {
          completed_lessons: 1,
          percentage: 50,
          total_lessons: 2
        },
        modules:
          [{
            id: secondFirstModule.id,
            course_id: secondFirstModule.courseId,
            title: secondFirstModule.title,
            is_root_module: secondFirstModule.isRootModule,
            module_id: secondFirstModule.moduleId,
            lessons: [{
              id: secondFirstLesson.id,
              title: secondFirstLesson.title,
              module_id: secondFirstLesson.moduleId,
              is_completed: true,
            }, {
              id: secondSecondLesson.id,
              title: secondSecondLesson.title,
              module_id: secondSecondLesson.moduleId,
              is_completed: false,
            }],
            modules: [{
              id: secondInnerModule.id,
              course_id: secondCourse.id,
              title: secondInnerModule.title,
              is_root_module: secondInnerModule.isRootModule,
              module_id: secondInnerModule.moduleId,
              lessons: [],
              modules: [],
            }]
          }, {
            id: secondSecondModule.id,
            course_id: secondSecondModule.courseId,
            title: secondSecondModule.title,
            is_root_module: secondSecondModule.isRootModule,
            module_id: secondSecondModule.moduleId,
            lessons: [],
            modules: []
          }]
      }]);
      expect(response.status).toBe(200);
    });
  });
});

