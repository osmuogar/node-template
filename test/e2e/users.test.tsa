/* PROJECT LICENSE */

import apiService, { listen } from '../../src/server';
import request from 'supertest';
import mysql from 'mysql2/promise';
import { cleanDatabase } from './util/cleandatabase.utils';
import { Server } from 'http';

let storageConnection: mysql.Connection;
let server: Server;
beforeAll(async () => {
  server = await listen();
  storageConnection = await mysql.createConnection({
    host: 'localhost',
    user: 'test',
    password: 'test',
    database: 'LEARNING_MANAGEMENT_SYSTEM',
  });
});
afterAll(async () => {
  await storageConnection.end();
  return new Promise<void>((resolve, reject) => {
    server.close((err) => {
      if (err) {
        return reject(err);
      }
      return resolve();
    });
  })
});

describe('IT | Users', () => {
  describe('POST /users/', () => {
    afterEach(async () => {
      await cleanDatabase(storageConnection);
    });
    it('should register the user', async () => {
      const PATH = '/v1/users';
      const EMAIL = 'email@example.com';
      const response = await request(apiService).post(PATH).send({
        email: EMAIL
      });
      expect(response.status).toBe(201);
      expect(typeof response.body.id).toBe('string');
      expect(response.body).toEqual({
        id: response.body.id,
        email: EMAIL
      });
    });
  });
});

